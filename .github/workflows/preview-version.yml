name: Preview Version

on:
  pull_request:
    branches: [ "main", "develop" ]
    types: [opened, edited, labeled, unlabeled, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview-version:
    runs-on: ubuntu-latest

    steps:
      - name: 🔄 Checkout código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: 📖 Obtener versión actual
        id: read_version
        run: |
          VERSION=$(grep -m1 '<revision>' pom.xml | sed -E 's/.*<revision>(.*)<\/revision>.*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "🔍 Versión actual en pom.xml: $VERSION"

      - name: 🏷️ Verificar si existe etiqueta de versión
        id: detect_label
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABEL=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | grep -E 'bugfix|fix|hotfix|feature' | head -n 1 || true)
          echo "LABEL=$LABEL" >> $GITHUB_ENV
          echo "TARGET_BRANCH=${{ github.base_ref }}" >> $GITHUB_ENV

      - name: 🧮 Calcular versión
        id: calc_version
        run: |
          BASE="${{ env.VERSION }}"
          BASE_CLEAN="${BASE%-SNAPSHOT}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$BASE_CLEAN"
          LABEL="${{ env.LABEL }}"
          TARGET_BRANCH="${{ env.TARGET_BRANCH }}"

          if [[ "$LABEL" == "feature" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$LABEL" =~ ^(bugfix|fix|hotfix)$ ]]; then
            PATCH=$((PATCH + 1))
          fi

          if [[ "$TARGET_BRANCH" == "main" ]]; then
            # Para main: mostrar versión release
            if [[ -z "$LABEL" ]]; then
              DISPLAY_VERSION="${BASE%-SNAPSHOT}"
            else
              DISPLAY_VERSION="$MAJOR.$MINOR.$PATCH"
            fi
            VERSION_TYPE="Release"
          else
            # Para develop: mostrar versión SNAPSHOT
            if [[ -z "$LABEL" ]]; then
              DISPLAY_VERSION="$BASE"
            else
              DISPLAY_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
            fi
            VERSION_TYPE="SNAPSHOT"
          fi

          echo "DISPLAY_VERSION=$DISPLAY_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV

          echo ""
          echo "🔮 Versión calculada para $TARGET_BRANCH:"
          echo "   Versión actual: $BASE"
          echo "   Etiqueta:       ${LABEL:-ninguna}"
          echo "   Nueva versión:  $DISPLAY_VERSION ($VERSION_TYPE)"
          echo ""

      - name: 💬 Comentar en la PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          AUTHOR=$(gh pr view ${{ github.event.pull_request.number }} --json author --jq '.author.login')
          DATE=$(date -u +"%Y/%m/%d %H:%M UTC")
          TARGET_BRANCH="${{ env.TARGET_BRANCH }}"

          echo "👤 Autor: $AUTHOR" > comment.txt
          echo "📅 Fecha: $DATE" >> comment.txt
          echo "" >> comment.txt

          if [[ "$TARGET_BRANCH" == "main" ]]; then
            echo "🚀 Versión de RELEASE que se generará:" >> comment.txt
            echo "   \`${{ env.DISPLAY_VERSION }}\`" >> comment.txt
            echo "" >> comment.txt
            echo "ℹ️ Esta versión se usará para la publicación oficial." >> comment.txt
          else
            echo "🔧 Próxima versión SNAPSHOT:" >> comment.txt
            echo "   \`${{ env.DISPLAY_VERSION }}\`" >> comment.txt
            echo "" >> comment.txt
            echo "ℹ️ Esta versión se usará durante el desarrollo." >> comment.txt
          fi

          gh pr comment ${{ github.event.pull_request.number }} --body-file comment.txt