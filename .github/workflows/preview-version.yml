name: Preview Version

on:
  pull_request:
    branches: [ "main", "develop" ]
    types: [opened, edited, labeled, unlabeled, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview-version:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: 📖 Extraer metadata del proyecto
        id: project_metadata
        run: |
          # Extraer el artifactId del pom.xml
          ARTIFACT_ID=$(awk -F'[<>]' '/<artifactId>/{print $3; exit}' pom.xml)
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          
          # Extraer versión (busca primero <version>, luego <revision>)
          VERSION=$(awk '
            BEGIN {found=0}
            /<version>/ && !found {print $0; found=1; exit}
            END {if (!found) {print "<revision>UNKNOWN</revision>"}}' pom.xml | 
            sed -E 's/.*<(version|revision)>(.*)<\/(version|revision)>.*/\2/')
          
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BASE_REF=${{ github.base_ref }}" >> $GITHUB_ENV
          echo "🔍 Artifact ID: $ARTIFACT_ID"
          echo "🔍 Versión actual: $VERSION"

      - name: 🏷️ Obtener etiquetas PR
        id: get_labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABEL=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | 
            grep -E 'bugfix|fix|hotfix|feature|release' | head -n 1 || true)
          echo "PR_LABEL=$LABEL" >> $GITHUB_ENV
          echo "🔖 Etiqueta detectada: ${LABEL:-ninguna}"

      - name: 🧮 Calcular versión
        id: calculate_version
        run: |
          # Limpiar y parsear versión actual
          CLEAN_VERSION="${CURRENT_VERSION%-SNAPSHOT}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "${CLEAN_VERSION:-0.0.0}"
          
          # Incrementar según tipo de cambio
          case "$PR_LABEL" in
            "feature") 
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "bugfix"|"fix"|"hotfix")
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "⚠️ No se detectó etiqueta de versión, manteniendo versión actual"
              ;;
          esac

          # Determinar versión final según rama destino
          if [[ "$BASE_REF" == "main" ]]; then
            FINAL_VERSION="$MAJOR.$MINOR.$PATCH"
            VERSION_TYPE="RELEASE"
          else
            FINAL_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
            VERSION_TYPE="SNAPSHOT"
          fi

          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          echo "🎯 Versión calculada para $BASE_REF: $FINAL_VERSION ($VERSION_TYPE)"

      - name: 💬 Publicar comentario en PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configurar emojis según tipo de versión
          if [[ "$VERSION_TYPE" == "RELEASE" ]]; then
            EMOJI="🚀"
            TITLE="RELEASE"
            NOTE="Esta versión se publicará oficialmente"
          else
            EMOJI="🔧"
            TITLE="SNAPSHOT"
            NOTE="Versión para desarrollo continuo"
          fi

          # Crear mensaje con formato Markdown
          MESSAGE="### 📦 $ARTIFACT_ID\n\n"
          MESSAGE+="| Campo         | Valor                  |\n"
          MESSAGE+="|---------------|------------------------|\n"
          MESSAGE+="| 👤 Autor      | ${{ github.actor }}     |\n"
          MESSAGE+="| 📅 Fecha      | $(date -u +"%Y/%m/%d %H:%M UTC") |\n"
          MESSAGE+="| $EMOJI Versión | **$FINAL_VERSION** ($TITLE) |\n"
          MESSAGE+="| 📌 Etiqueta   | ${PR_LABEL:-Ninguna}   |\n\n"
          MESSAGE+="> $NOTE\n\n"
          MESSAGE+="<sub>🤖 Generado automáticamente</sub>"

          gh pr comment ${{ github.event.pull_request.number}} --body "$MESSAGE"
          echo "✅ Comentario publicado en PR"