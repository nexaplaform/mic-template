name: Preview Version

on:
  pull_request:
    branches: [ "main", "develop" ]
    types: [opened, edited, labeled, unlabeled, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview-version:
    runs-on: ubuntu-latest
    steps:
      - name: 🔄 Checkout código
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: 📖 Extraer metadata del proyecto
        id: project_metadata
        run: |
          # Extraer artifactId y versión del pom.xml
          ARTIFACT_ID=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='artifactId']/text()" pom.xml 2>/dev/null || grep -m1 '<artifactId>' pom.xml | sed -E 's/.*<artifactId>(.*)<\/artifactId>.*/\1/')
          VERSION=$(xmllint --xpath "//*[local-name()='project']/*[local-name()='version']/text()" pom.xml 2>/dev/null || grep -m1 '<version>' pom.xml | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
          
          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BASE_REF=${{ github.base_ref }}" >> $GITHUB_ENV
          echo "🔍 Artifact: $ARTIFACT_ID"
          echo "🔍 Versión: $VERSION"

      - name: 🏷️ Obtener etiquetas PR
        id: get_labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABEL=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | grep -E 'bugfix|fix|hotfix|feature|release' | head -n 1 || true)
          echo "PR_LABEL=$LABEL" >> $GITHUB_ENV
          echo "🔖 Etiqueta: ${LABEL:-ninguna}"

      - name: 🧮 Calcular versión
        id: calculate_version
        run: |
          # Parsear y limpiar versión
          CLEAN_VERSION="${CURRENT_VERSION%-SNAPSHOT}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "${CLEAN_VERSION:-0.0.0}"

          # Incrementar versión según etiqueta
          case "$PR_LABEL" in
            "feature") 
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            "bugfix"|"fix"|"hotfix")
              PATCH=$((PATCH + 1))
              ;;
            *)
              echo "ℹ️ Sin etiqueta de versión, manteniendo versión actual"
              ;;
          esac

          # Determinar versión final
          if [[ "$BASE_REF" == "main" ]]; then
            FINAL_VERSION="$MAJOR.$MINOR.$PATCH"
            VERSION_TYPE="RELEASE"
          else
            FINAL_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
            VERSION_TYPE="SNAPSHOT"
          fi

          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          echo "🎯 Versión calculada: $FINAL_VERSION ($VERSION_TYPE)"

      - name: 💬 Publicar comentario en PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Configurar emojis y textos
          if [[ "$VERSION_TYPE" == "RELEASE" ]]; then
            HEADER="🚀 **VERSIÓN RELEASE**"
            FOOTER="Esta versión se publicará oficialmente"
          else
            HEADER="🔧 **PRÓXIMA VERSIÓN SNAPSHOT**"
            FOOTER="Versión para desarrollo continuo"
          fi

          # Construir mensaje
          MESSAGE="$HEADER\n\n"
          MESSAGE+="▸ **Artifact:** \`$ARTIFACT_ID\`\n"
          MESSAGE+="▸ **Versión:** \`$FINAL_VERSION\`\n"
          MESSAGE+="▸ **Autor:** ${{ github.actor }}\n"
          MESSAGE+="▸ **Fecha:** $(date -u +"%Y/%m/%d %H:%M UTC")\n"
          MESSAGE+="▸ **Etiqueta:** ${PR_LABEL:-Ninguna}\n\n"
          MESSAGE+="_${FOOTER}_\n"
          MESSAGE+="<sub>🤖 Generado automáticamente</sub>"

          gh pr comment ${{ github.event.pull_request.number}} --body "$(echo -e "$MESSAGE")"