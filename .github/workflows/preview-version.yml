name: Preview Version

on:
  pull_request:
    branches: [ "main", "develop" ]
    types: [opened, edited, labeled, unlabeled, synchronize]

permissions:
  contents: read
  pull-requests: write

jobs:
  preview-version:
    runs-on: ubuntu-latest
    steps:
      - name: üîÑ Checkout c√≥digo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: ${{ github.event.pull_request.head.ref }}

      - name: üìñ Obtener versi√≥n del artefacto (no del parent)
        id: get_version
        run: |
          # Busca la versi√≥n espec√≠fica del artefacto (mic-template)
          VERSION=$(awk '/<artifactId>mic-template<\/artifactId>/{getline; if(/<version>/){print $0}}' pom.xml | sed -E 's/.*<version>(.*)<\/version>.*/\1/')
          
          # Si no encuentra en <version>, busca en <revision>
          if [ -z "$VERSION" ]; then
            VERSION=$(awk '/<artifactId>mic-template<\/artifactId>/{getline; if(/<revision>/){print $0}}' pom.xml | sed -E 's/.*<revision>(.*)<\/revision>.*/\1/')
          fi
          
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "BASE_REF=${{ github.base_ref }}" >> $GITHUB_ENV
          echo "üîç Versi√≥n actual de mic-template: $VERSION"

      - name: üè∑Ô∏è Obtener etiquetas PR
        id: get_labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          LABEL=$(gh pr view ${{ github.event.pull_request.number }} --json labels --jq '.labels[].name' | grep -E 'bugfix|fix|hotfix|feature|release' | head -n 1 || true)
          echo "PR_LABEL=$LABEL" >> $GITHUB_ENV
          echo "üîñ Etiqueta detectada: ${LABEL:-ninguna}"

      - name: üßÆ Calcular versi√≥n
        id: calculate_version
        run: |
          CURRENT_VERSION="${{ env.CURRENT_VERSION }}"
          CLEAN_VERSION="${CURRENT_VERSION%-SNAPSHOT}"
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CLEAN_VERSION"
          PR_LABEL="${{ env.PR_LABEL }}"
          TARGET_BRANCH="${{ env.BASE_REF }}"

          # L√≥gica de incremento de versi√≥n
          if [[ "$PR_LABEL" == "feature" ]]; then
            MINOR=$((MINOR + 1))
            PATCH=0
          elif [[ "$PR_LABEL" =~ ^(bugfix|fix|hotfix)$ ]]; then
            PATCH=$((PATCH + 1))
          fi

          # Determinar versi√≥n a mostrar
          if [[ "$TARGET_BRANCH" == "main" ]]; then
            FINAL_VERSION="$MAJOR.$MINOR.$PATCH"
            VERSION_TYPE="RELEASE"
          else
            FINAL_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"
            VERSION_TYPE="SNAPSHOT"
          fi

          echo "FINAL_VERSION=$FINAL_VERSION" >> $GITHUB_ENV
          echo "VERSION_TYPE=$VERSION_TYPE" >> $GITHUB_ENV
          echo "üéØ Versi√≥n calculada para $TARGET_BRANCH: $FINAL_VERSION ($VERSION_TYPE)"

      - name: üí¨ Publicar comentario en PR
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Obtener informaci√≥n del autor del PR y del actor que dispar√≥ el workflow
          PR_AUTHOR=$(gh pr view ${{ github.event.pull_request.number }} --json author --jq '.author.login')
          WORKFLOW_ACTOR="${{ github.actor }}"
          CURRENT_DATE=$(date -u +"%Y/%m/%d %H:%M UTC")

          # Determinar qui√©n est√° realizando la release
          if [[ "$PR_AUTHOR" == "$WORKFLOW_ACTOR" ]]; then
            RELEASE_BY="$PR_AUTHOR"
          else
            RELEASE_BY="$WORKFLOW_ACTOR (ejecutor del workflow)"
          fi

          MESSAGE="üë§ **Release:** $RELEASE_BY\n"
          MESSAGE+="üìÖ **Fecha:** $CURRENT_DATE\n\n"

          if [[ "${{ env.BASE_REF }}" == "main" ]]; then
            MESSAGE+="üöÄ **RELEASE :**\n"
            MESSAGE+="\`${{ env.FINAL_VERSION }}\`\n\n"
          else
            MESSAGE+="üîß **Pr√≥xima versi√≥n SNAPSHOT:**\n"
            MESSAGE+="\`${{ env.FINAL_VERSION }}\`\n\n"
            MESSAGE+="‚ÑπÔ∏è Esta versi√≥n se usar√° durante el desarrollo continuo."
          fi

          echo "üìù Mensaje a publicar:"
          echo -e "$MESSAGE"

          gh pr comment ${{ github.event.pull_request.number}} --body "$(echo -e "$MESSAGE")"