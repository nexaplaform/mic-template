name: Generate release version

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout c√≥digo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚òï Configurar Java
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: ‚öôÔ∏è Crear settings.xml para Maven
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>github</username>
                <password>${{ secrets.GITHUB_TOKEN }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: üìñ Leer versi√≥n actual
        id: read_version
        run: |
          VERSION=$(grep -m1 '<revision>' pom.xml | sed -E 's/.*<revision>(.*)<\/revision>.*/\1/')
          VERSION_NO_SNAPSHOT="${VERSION%-SNAPSHOT}"
          echo "RELEASE_VERSION=$VERSION_NO_SNAPSHOT" >> $GITHUB_ENV
          echo "üîñ Versi√≥n base: $VERSION ‚Üí limpiada a: $VERSION_NO_SNAPSHOT"

      - name: üìù Actualizar pom.xml a versi√≥n release (sin -SNAPSHOT)
        run: |
          sed -i "s|<revision>.*</revision>|<revision>${{ env.RELEASE_VERSION }}</revision>|" pom.xml
          git config user.name "github-actions[bot]"
          git config user.email "github-actions@github.com"
          git commit -am "chore: prepare release v${{ env.RELEASE_VERSION }}"
          git push origin main

      - name: üöÄ Publicar release
        run: |
          echo "üöÄ Publicando release ${{ env.RELEASE_VERSION }}"
          mvn deploy -B -Drevision=${{ env.RELEASE_VERSION }} -s ~/.m2/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Crear tag si no existe
        run: |
          git fetch --tags
          if git rev-parse "v${{ env.RELEASE_VERSION }}" >/dev/null 2>&1; then
            echo "üè∑Ô∏è Tag v${{ env.RELEASE_VERSION }} ya existe."
          else
            echo "üè∑Ô∏è Creando tag v${{ env.RELEASE_VERSION }}"
            git config user.name "github-actions[bot]"
            git config user.email "github-actions@github.com"
            git tag "v${{ env.RELEASE_VERSION }}"
            git push origin "v${{ env.RELEASE_VERSION }}"
          fi

      - name: üîÅ Crear PR hacia develop con nueva SNAPSHOT
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.RELEASE_VERSION }}"
          PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$PATCH-SNAPSHOT"

          echo "üîÅ Pr√≥xima versi√≥n SNAPSHOT: $NEXT_VERSION"

          git fetch origin main
          git checkout -b sync-develop origin/main

          sed -i "s|<revision>.*</revision>|<revision>$NEXT_VERSION</revision>|" pom.xml

          git config user.name "github-actions[bot]"
          git config user.email "github-actions@github.com"
          git commit -am "chore: bump version to $NEXT_VERSION [sync from release]"
          git push -f origin sync-develop

          gh pr create -B develop -H sync-develop \
            --title "chore: bump version to $NEXT_VERSION" \
            --body "üîÅ Sincronizaci√≥n autom√°tica desde release v${{ env.RELEASE_VERSION }} con la pr√≥xima versi√≥n \`$NEXT_VERSION\` para continuar en develop."
