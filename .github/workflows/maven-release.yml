name: Release Workflow

on:
  push:
    branches: [ "main" ]

permissions:
  contents: write
  pull-requests: write
  packages: write

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: üîÑ Checkout c√≥digo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: ‚òï Configurar Java 21
        uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: 'temurin'

      - name: üìñ Extraer metadata del proyecto
        id: metadata
        run: |
          ARTIFACT_ID=$(awk '
            BEGIN { insideParent=0 }
            /<parent>/ { insideParent=1 }
            /<\/parent>/ { insideParent=0; next }
            /<artifactId>/ && !insideParent {
              match($0, /<artifactId>(.*)<\/artifactId>/, a)
              print a[1]
              exit
            }
          ' pom.xml)

          VERSION=$(awk -v aid="$ARTIFACT_ID" '
            /<artifactId>/ {
              match($0, /<artifactId>(.*)<\/artifactId>/, a)
              current=a[1]
              next
            }
            current == aid && /<version>/ {
              match($0, /<version>(.*)<\/version>/, v)
              print v[1]
              exit
            }
          ' pom.xml)

          echo "ARTIFACT_ID=$ARTIFACT_ID" >> $GITHUB_ENV
          echo "CURRENT_VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${VERSION%-SNAPSHOT}" >> $GITHUB_ENV

          echo "üîç Artifact ID: $ARTIFACT_ID"
          echo "üîç Versi√≥n detectada: $VERSION"
          echo "üîñ Versi√≥n release: ${VERSION%-SNAPSHOT}"

      - name: üè∑Ô∏è Calcular pr√≥xima versi√≥n SNAPSHOT
        id: next_version
        run: |
          IFS='.' read -r MAJOR MINOR PATCH <<< "${{ env.RELEASE_VERSION }}"
          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH-SNAPSHOT"
          echo "NEXT_VERSION=$NEXT_VERSION" >> $GITHUB_ENV
          echo "üîÅ Pr√≥xima versi√≥n SNAPSHOT: $NEXT_VERSION"

      - name: üìù Actualizar a versi√≥n release
        run: |
          awk -v ver="${{ env.RELEASE_VERSION }}" '
            /<artifactId>mic-template<\/artifactId>/ { found = 1 }
            found && /<version>/ {
              sub(/<version>.*<\/version>/, "<version>" ver "</version>")
              found = 0
            }
            { print }
          ' pom.xml > pom.tmp && mv pom.tmp pom.xml

          git config user.name "github-actions[bot]"
          git config user.email "github-actions@github.com"

          if [[ -n $(git status --porcelain) ]]; then
            git commit -am "chore: [release] ${{ env.ARTIFACT_ID }} v${{ env.RELEASE_VERSION }} [skip ci]"
            git push origin main
          else
            echo "‚úÖ No hay cambios para commitear"
          fi

      - name: üõ†Ô∏è Crear settings.xml para GitHub Packages
        run: |
          mkdir -p ~/.m2
          cat > ~/.m2/settings.xml <<EOF
          <settings>
            <servers>
              <server>
                <id>github</id>
                <username>${{ github.actor }}</username>
                <password>${{ secrets.GH_PAT }}</password>
              </server>
            </servers>
          </settings>
          EOF

      - name: üöÄ Publicar en GitHub Packages
        run: mvn deploy -DskipTests --settings ~/.m2/settings.xml
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: üè∑Ô∏è Crear tag de release si no existe
        run: |
          if git rev-parse "v${{ env.RELEASE_VERSION }}" >/dev/null 2>&1; then
            echo "‚úÖ Tag v${{ env.RELEASE_VERSION }} ya existe. Nada que hacer."
          else
            git tag -a "v${{ env.RELEASE_VERSION }}" -m "Release ${{ env.ARTIFACT_ID }} v${{ env.RELEASE_VERSION }}"
            git push origin "v${{ env.RELEASE_VERSION }}"
          fi

      - name: üîÑ Preparar pr√≥xima versi√≥n SNAPSHOT
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          git checkout -b "release/${{ env.RELEASE_VERSION }}"

          awk -v ver="${{ env.NEXT_VERSION }}" '
            /<artifactId>mic-template<\/artifactId>/ { found = 1 }
            found && /<version>/ {
              sub(/<version>.*<\/version>/, "<version>" ver "</version>")
              found = 0
            }
            { print }
          ' pom.xml > pom.tmp && mv pom.tmp pom.xml

          git config user.name "github-actions[bot]"
          git config user.email "github-actions@github.com"
          git commit -am "chore: [snapshot] ${{ env.ARTIFACT_ID }} ${{ env.NEXT_VERSION }} [skip ci]"
          git push origin "release/${{ env.RELEASE_VERSION }}"

          gh pr create \
            --base develop \
            --head "release/${{ env.RELEASE_VERSION }}" \
            --title "Sync: Bump ${{ env.ARTIFACT_ID }} to ${{ env.NEXT_VERSION }}" \
            --body "Actualizaci√≥n autom√°tica post-release:\n\n- Artifact: ${{ env.ARTIFACT_ID }}\n- Versi√≥n release: ${{ env.RELEASE_VERSION }}\n- Nueva versi√≥n SNAPSHOT: ${{ env.NEXT_VERSION }}"
